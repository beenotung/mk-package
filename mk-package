#!/usr/bin/env node

let distDirname = process.argv[2] || 'dist';
let verbose = ['1', 'true'].includes((process.env.VERBOSE || '').toLowerCase())

// load packages
let path = require('path');
let fs = require('fs');

// find package.json
let packageDir = '.';
for (; ;) {
  if (verbose) {
    console.log('scan', packageDir, 'for package.json');
  }
  let files = fs.readdirSync(packageDir);
  if (files.includes('package.json')) {
    break;
  }
  packageDir = path.join(packageDir, '..');
}
let distDir = path.join(packageDir, distDirname);
let distPackageFile = path.join(distDir, 'package.json');
let distFiles = fs.readdirSync(distDir);
let packageFile = path.join(packageDir, 'package.json');

if (!verbose) {
  console.log('mk-package from', packageFile, 'to', distPackageFile);
  console.log = function () {
    // noop
  };
}

console.log('reading', packageFile);
let json = JSON.parse(fs.readFileSync(packageFile));

if (distFiles.includes('index.js')) {
  console.log('set main as index.js');
  json.main = 'index.js';
} else {
  delete json.main;
}

if (distFiles.includes('index.d.ts')) {
  console.log('set types as index.d.ts');
  json.types = 'index.d.ts';
} else {
  delete json.types;
}

if (json.scripts && json.scripts.prepublishOnly) {
  console.log('remove prepublishOnly script')
  delete json.scripts.prepublishOnly;
}

let keysToRemove = [
  'husky',
  'directory',
  'files',
  'devDependencies'
];
for (let key of keysToRemove) {
  if (json[key]) {
    console.log('remove', key, 'config');
    delete json[key];
  }
}

fs.writeFileSync(distPackageFile, JSON.stringify(json, null, 2));
console.log('saved to', distPackageFile);

let filesToCopy = [
  'README.md',
  'LICENSE',
  '.npmignore'
]
  .map(file => file.toUpperCase());
for (let file of fs.readdirSync(packageDir)) {
  if (!filesToCopy.includes(file.toUpperCase())) {
    continue
  }
  fs.copyFileSync(
    path.join(packageDir, file),
    path.join(distDir, file),
  );
  console.log('copied', file);
}
